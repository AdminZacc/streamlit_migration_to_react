// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  username      String?   @unique
  bio           String?
  role          Role      @default(USER)
  membershipId  String?   @map("membership_id")
  isActive      Boolean   @default(true)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  badges        UserBadge[]
  sentMessages  Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  analytics     Analytics[]
  membership    Membership? @relation(fields: [membershipId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?  @map("image_url")
  authorId  String   @map("author_id")
  isActive  Boolean  @default(true)
  
  // Relations
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Like {
  id     String @id @default(cuid())
  userId String @map("user_id")
  postId String @map("post_id")
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id       String @id @default(cuid())
  content  String
  userId   String @map("user_id")
  postId   String @map("post_id")
  parentId String? @map("parent_id")
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Badge {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  level       String
  icon        String
  criteria    Json
  
  userBadges  UserBadge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("badges")
}

model UserBadge {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  badgeId String @map("badge_id")
  
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  awardedAt DateTime @default(now())

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Message {
  id         String  @id @default(cuid())
  content    String
  senderId   String  @map("sender_id")
  receiverId String  @map("receiver_id")
  isRead     Boolean @default(false)
  
  sender     User    @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Membership {
  id          String @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int    // in days
  features    Json
  
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("memberships")
}

model Analytics {
  id         String   @id @default(cuid())
  eventType  String   @map("event_type")
  userId     String?  @map("user_id")
  metadata   Json?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("analytics")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
